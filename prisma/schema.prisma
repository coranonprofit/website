datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   BranchMember[]
  photos        Photo[]
  admin         Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Branch {
  id   String @id @unique @default(cuid())
  name String @unique

  members BranchMember[]
  events  BranchEvent[]
}

model BranchMember {
  userId   String
  branchId String
  role     String
  owner    Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch Branch @relation(fields: [branchId], references: [id], onDelete: NoAction)

  @@unique([userId, branchId])
}

model BranchEvent {
  id       String @id @unique @default(cuid())
  branchId String
  name     String

  photos Photo[]

  branch Branch @relation(fields: [branchId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, branchId])
}

model Photo {
  id      String @id @unique @default(cuid())
  eventId String
  userId  String

  user  User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  event BranchEvent @relation(fields: [eventId], references: [id], onDelete: NoAction)
}
